package controller;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.el.stream.Optional;
import org.hibernate.mapping.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import exception.ResourceNotFoundException;
import model.Address;
import model.Customer;
import repository.AddressRepository;
import repository.CustomerRepository;

@CrossOrigin
@RestController
@RequestMapping("/customers")
public class CustomerController {
    
    @Autowired
    private CustomerRepository customerRepository;
    
    @GetMapping("/customer") 
    public Collection<Customer> getAllCustomer(){
    	return customerRepository.findAll();
    }
    
    @GetMapping("/customer/{id}")
    public ResponseEntity<Customer> getCustomerById(@PathVariable("id") int id) {
    	Customer customer = CustomerRepository.findCustomerById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Ne postoji kupac sa id: " + id));
		return ResponseEntity.ok(customer);
	}
    
    @PostMapping("/customers")
    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
		if(!customerRepository.existsById(customer.getId_user())) {
			customerRepository.save(customer);
			return new ResponseEntity<Customer>(HttpStatus.OK);
		}
		return new ResponseEntity<Customer>(HttpStatus.CONFLICT);
	}
    
    @PutMapping("/customer/{id}")
    public ResponseEntity<Customer> updateCustomer(@PathVariable("id") int id, @RequestBody Customer newCustomer) {		
    	Customer customer = customerRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Ne postoji kupac sa id: " + id));
        customer.setPhone(newCustomer.getPhone());
        customer.setAddress(newCustomer.getAddress());
        
        Customer updatedCustomer = customerRepository.save(customer);
        return ResponseEntity.ok(updatedCustomer);
    }
    
    @DeleteMapping("/customer/{id}")
   	public ResponseEntity<Customer> deleteCustomer(@PathVariable("id") int id){
   		if (!customerRepository.existsById(id)) {
   			return new ResponseEntity<Customer>(HttpStatus.NO_CONTENT);
   		}
   		
   		customerRepository.deleteById(id);		
   		return new ResponseEntity<Customer>(HttpStatus.OK);
   	}
   	
}
