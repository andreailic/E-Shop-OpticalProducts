package controller;


import java.util.Collection;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import exception.ResourceNotFoundException;
import model.Address;
import repository.AddressRepository;

@RestController
@RequestMapping("/addresses")
public class AddressController {

    @Autowired
    private AddressRepository addressRepository;

    @GetMapping("/address/{id}")
	public ResponseEntity<Address> getAddressById(@PathVariable("id") int id) {
		Address adresa = AddressRepository.findAddressById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Ne postoji adresa sa id: " + id));
		return ResponseEntity.ok(adresa);
	}

    
    @GetMapping("/addressStreet")
	public Collection<Address> getAddressByStreet(@RequestParam(required=true) String street) {
		return addressRepository.findAddressByStreetIgnoreCase(street);
	}
    
    @PostMapping("/addresses")
	public ResponseEntity<Address> createAddress(@RequestBody Address address) {
		if(!addressRepository.existsById(address.getId_address())) {
			addressRepository.save(address);
			return new ResponseEntity<Address>(HttpStatus.OK);
		}
		return new ResponseEntity<Address>(HttpStatus.CONFLICT);
	}
    
    @PutMapping("/address/{id}")
	public ResponseEntity<Address> updateAddress(@PathVariable("id") int id, @RequestBody Address newAddress) {		
		Address address = addressRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Ne postoji adresa sa id: " + id));
		address.setStreet(newAddress.getStreet());
		address.setCountry(newAddress.getCountry());
		address.setCity(newAddress.getCity());
		address.setZip(newAddress.getZip());
		
		Address updatedAddress = addressRepository.save(address);
		
		return ResponseEntity.ok(updatedAddress);
	}
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Customer> deleteCustomer(@PathVariable("id") int id) {
        Optional<Customer> customerOptional = customerRepository.findById(id);
        if (!customerOptional.isPresent()) {
            return new ResponseEntity<Customer>(HttpStatus.NOT_FOUND);
        }
        customerRepository.deleteById(id);
        return new ResponseEntity<Customer>(HttpStatus.OK);
    }

}

