package controller;


import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import exception.ResourceNotFoundException;
import model.Brand;
import repository.BrandRepository;

@CrossOrigin
@RestController
	@RequestMapping("/brands")
	public class BrandController {

	    @Autowired
	    private BrandRepository brandRepository;

	    @GetMapping("/brand/{id}")
		public ResponseEntity<Brand> getBrandById(@PathVariable("id") int id) {
			Brand brand = brandRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("Brand not found with id: " + id));
			return ResponseEntity.ok(brand);
		}


	    @PostMapping("/brands")
		public ResponseEntity<Brand> createBrand(@RequestBody Brand brand) {
			if(!brandRepository.existsById(brand.getId_brand())) {
				brandRepository.save(brand);
				return new ResponseEntity<Brand>(HttpStatus.OK);
			}
			return new ResponseEntity<Brand>(HttpStatus.CONFLICT);
		}

	    @PutMapping("/brand/{id}")
		public ResponseEntity<Brand> updateBrand(@PathVariable("id") int id, @RequestBody Brand newBrand) {		
			Brand brand = brandRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("Brand not found with id: " + id));
			brand.setBrandName(newBrand.getBrandName());
			brand.setProduct(newBrand.getProduct());
			
			Brand updatedBrand = brandRepository.save(brand);
			
			return ResponseEntity.ok(updatedBrand);
		}

	    @DeleteMapping("/brand/{id}")
		public ResponseEntity<Brand> deleteBrand(@PathVariable("id") int id){
			if (!brandRepository.existsById(id)) {
				return new ResponseEntity<Brand>(HttpStatus.NO_CONTENT);
			}
			
			brandRepository.deleteById(id);		
			return new ResponseEntity<Brand>(HttpStatus.OK);
		}
		
	}


